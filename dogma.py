# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dogma', [dirname(__file__)])
        except ImportError:
            import _dogma
            return _dogma
        if fp is not None:
            try:
                _mod = imp.load_module('_dogma', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dogma = swig_import_helper()
    del swig_import_helper
else:
    import _dogma
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Dogma(_object):
    """Proxy of C Dogma struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dogma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dogma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = _dogma.Dogma_ctx_set
    __swig_getmethods__["ctx"] = _dogma.Dogma_ctx_get
    if _newclass:ctx = _swig_property(_dogma.Dogma_ctx_get, _dogma.Dogma_ctx_set)
    def __init__(self): 
        """__init__(Dogma self) -> Dogma"""
        this = _dogma.new_Dogma()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dogma.delete_Dogma
    __del__ = lambda self : None;
    def set_ship(self, *args):
        """
        set_ship(Dogma self, int shipType)

        Parameters:
            shipType: int

        """
        return _dogma.Dogma_set_ship(self, *args)

    def get_ship_attribute(self, *args):
        """
        get_ship_attribute(Dogma self, int arg2) -> double

        Parameters:
            arg2: int

        """
        return _dogma.Dogma_get_ship_attribute(self, *args)

    def get_module_attribute(self, *args):
        """
        get_module_attribute(Dogma self, int arg2, int arg3) -> double

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_get_module_attribute(self, *args)

    def get_charge_attribute(self, *args):
        """
        get_charge_attribute(Dogma self, int arg2, int arg3) -> double

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_get_charge_attribute(self, *args)

    def set_module_state(self, *args):
        """
        set_module_state(Dogma self, int arg2, int arg3)

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_set_module_state(self, *args)

    def add_module_s(self, *args):
        """
        add_module_s(Dogma self, int arg2, int arg3) -> int

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_add_module_s(self, *args)

    def add_module_c(self, *args):
        """
        add_module_c(Dogma self, int arg2, int arg3) -> int

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_add_module_c(self, *args)

    def add_module_sc(self, *args):
        """
        add_module_sc(Dogma self, int arg2, int arg3, int arg4) -> int

        Parameters:
            arg2: int
            arg3: int
            arg4: int

        """
        return _dogma.Dogma_add_module_sc(self, *args)

    def add_charge(self, *args):
        """
        add_charge(Dogma self, int arg2, int arg3)

        Parameters:
            arg2: int
            arg3: int

        """
        return _dogma.Dogma_add_charge(self, *args)

    def get_capacitor(self, *args):
        """
        get_capacitor(Dogma self, bool include_reload_time)

        Parameters:
            include_reload_time: bool

        """
        return _dogma.Dogma_get_capacitor(self, *args)

    def set_default_skill_level(self, *args):
        """
        set_default_skill_level(Dogma self, int skillLevel)

        Parameters:
            skillLevel: int

        """
        return _dogma.Dogma_set_default_skill_level(self, *args)

    def set_skill_level(self, *args):
        """
        set_skill_level(Dogma self, int skill, int skillLevel)

        Parameters:
            skill: int
            skillLevel: int

        """
        return _dogma.Dogma_set_skill_level(self, *args)

    def reset_skill_levels(self):
        """
        reset_skill_levels(Dogma self)

        Parameters:
            self: Dogma *

        """
        return _dogma.Dogma_reset_skill_levels(self)

Dogma_swigregister = _dogma.Dogma_swigregister
Dogma_swigregister(Dogma)

DOGMA_STATE_Unplugged = _dogma.DOGMA_STATE_Unplugged
DOGMA_STATE_Offline = _dogma.DOGMA_STATE_Offline
DOGMA_STATE_Online = _dogma.DOGMA_STATE_Online
DOGMA_STATE_Active = _dogma.DOGMA_STATE_Active
DOGMA_STATE_Overloaded = _dogma.DOGMA_STATE_Overloaded
# This file is compatible with both classic and new-style classes.


